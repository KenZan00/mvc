{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
    <h1>Redovisning</h1>

    <section id="kmom01">
        <h2>Kursmoment 01</h2>
        <p>Förkunskaperna för objektorienterad programmering ligger i nivå med "känner till att det finns" för mig. Jag har fått testa i en mycket kort övning i Python för att man skulle känna till att arbetssättet finns.</p>
        <p>PHPs modell följer i denna kursen följer objektorienterad programeringsparadigm. Man jobbar med objekt och har metoder som är kopplade till objekten. Objekten instansieras utifrån en klass som är dess "mall". Man behöver ha koll på hur man skapar klasser och objekt utifrån en konstruktor. Man behöver också ha koll på inkapsling och hur man när ett klass/objekts variabler samt fördelerna med namespaces.</p>
        <p>Strukturen och kodbasen uppfattar jag, påminner mycket mer om hur vi jobbade i PICO under designkursen än i databaser. Troligt mycket tack vara twig. Inledningsvis har det varit lättare att följa mönstret och skapa sidor, templates och presentera information på sidorna i symfony med den setup som vi har. Den verkar också väldigt modulär där man kan välja lite hur mna vill jobba när det gäller olika ramverk att lägga på.</p>
        <p>I "PHP the right way" fann jag det praktiskt att först vara intresserad av "Dependancy Management" "Coding Practices" och "Templating" , detta för att det var aktuellt i uppstarten och tydliggjorde en del eventuella frågor och gav fler exempel på kod. Det som jag tycker är lika spännande som utmanande är när det går in på säkerhetsaspekten. Om jag skulle lyfta fram en del som är bra att känna till, då blir det kap.4 OOP där det finns länkar till OOP PHP dokumentation, och den innehåller massvis med exempel som är kategoriserade. </p>
        <p>Min TIL för detta kmom är klart om kodstrukturen som vi använder i kursen. Med vyer och kontroller kan man hålla isär koden och organisera den på ett bra satt, det gör det också överblickbart med alla variabler som man skickar in och vad de innehåller. Att använda templatefiler förenklar också mycket, sidan blir anpassningsbar men all kod som kan samlas på dett anant ställe gör man med det. Kvar har man att jobba med det som sidan primärt skall innehålla.</p>
    </section>

    <section id="kmom02">
        <h2>Kursmoment 02</h2>
        <p>Arv är som i CardGraphic i uppgiften, den ärver struktur/egenskaper från Card och extendar den så att man kan ändra på detaljer i Card eller bygga på. Komposition är när man använder en annan klass objekt i koden, till exempel där DeckOfCards skapar kort genom this->deck[] = new card(); . Interface har jag inte använt i min kod men har tolkat det som en kodbeskrivning där man sätter kraven för hur objectet skall se ut eller vilka egenskaper de skall ha/dela. En trait är en icke klassbestämd metod som fritt kan användas av andra klasser.</p>
        <p>Jag löste i huvudsak uppgiften så när de övningar vi gjort och de lektioner som jag medverkat/sett. Använde de klasser som föreslogs och följde mönstrewt från Dice då det kändes so mden väg som var närmast för mig att känna att jag skulle få ihop all kod organiserat. Jag började uppgiften med att efterlikna våra testsidor med enkla länkar där varje route hade sin kod för att interagera med classerna. Genom att hålla mig nära strukturen kunde jag lätt testa mig fram och ändra mindre saker i taget. Jag är nöjd med koden så som jag fått ihop den, förbättringspotential ser jag i framförallt hur jag hanterar routes, hur konsekvent användat av variabelnamn oc hstrukturen i vilken ordning de skrivs ut. Vad gäller alla metoder och klasser så var detta första gången jag skrev denna typ av kod och jag har läst mycket kod som löser liknande uppgifter för att hitta hur strukturen skulle va. Jag får fundera mer på förbättring under kursen.</p>
        <p>Jag upplever att symfony är ett bra vekrtyg att jobba med, det hanterar mycket kodstruktur och kopplingar till en. Hittills tycker jag om att jobba i ramverket då det känns tillräckligt naturligt i sin struktur och det är lätt att se/skapa/sätta ihop variabler, funktioner och routes. Det känns dock fortfarande som att där finns väldigt mycket mer att lära.</p>
        <p>Mitt TIL för detta momentet blir två detaljer. Det första är att OOP som jag var rädd för innan var inte så dumt när man får till det, när man har grunden på plats är det gansdka trewvligt att jobba med. Det andra är, '/' är ett fantastiskt tecken som programmera tills det sitter på fel ställe, lite noggran läsning av egen kod spar mycket tid senare. </p>
    </section>
{% endblock %}
