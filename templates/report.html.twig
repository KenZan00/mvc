{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}
    <h1>Redovisning</h1>

    <section id="kmom01">
        <h2>Kursmoment 01</h2>
        <p>Förkunskaperna för objektorienterad programmering ligger i nivå med "känner till att det finns" för mig. Jag har fått testa i en mycket kort övning i Python för att man skulle känna till att arbetssättet finns.</p>
        <p>PHPs modell följer i denna kursen följer objektorienterad programeringsparadigm. Man jobbar med objekt och har metoder som är kopplade till objekten. Objekten instansieras utifrån en klass som är dess "mall". Man behöver ha koll på hur man skapar klasser och objekt utifrån en konstruktor. Man behöver också ha koll på inkapsling och hur man när ett klass/objekts variabler samt fördelerna med namespaces.</p>
        <p>Strukturen och kodbasen uppfattar jag, påminner mycket mer om hur vi jobbade i PICO under designkursen än i databaser. Troligt mycket tack vara twig. Inledningsvis har det varit lättare att följa mönstret och skapa sidor, templates och presentera information på sidorna i symfony med den setup som vi har. Den verkar också väldigt modulär där man kan välja lite hur mna vill jobba när det gäller olika ramverk att lägga på.</p>
        <p>I "PHP the right way" fann jag det praktiskt att först vara intresserad av "Dependancy Management" "Coding Practices" och "Templating" , detta för att det var aktuellt i uppstarten och tydliggjorde en del eventuella frågor och gav fler exempel på kod. Det som jag tycker är lika spännande som utmanande är när det går in på säkerhetsaspekten. Om jag skulle lyfta fram en del som är bra att känna till, då blir det kap.4 OOP där det finns länkar till OOP PHP dokumentation, och den innehåller massvis med exempel som är kategoriserade. </p>
        <p>Min TIL för detta kmom är klart om kodstrukturen som vi använder i kursen. Med vyer och kontroller kan man hålla isär koden och organisera den på ett bra satt, det gör det också överblickbart med alla variabler som man skickar in och vad de innehåller. Att använda templatefiler förenklar också mycket, sidan blir anpassningsbar men all kod som kan samlas på dett anant ställe gör man med det. Kvar har man att jobba med det som sidan primärt skall innehålla.</p>
    </section>

    <section id="kmom02">
        <h2>Kursmoment 02</h2>
        <p>Arv är som i CardGraphic i uppgiften, den ärver struktur/egenskaper från Card och extendar den så att man kan ändra på detaljer i Card eller bygga på. Komposition är när man använder en annan klass objekt i koden, till exempel där DeckOfCards skapar kort genom this->deck[] = new card(); . Interface har jag inte använt i min kod men har tolkat det som en kodbeskrivning där man sätter kraven för hur objectet skall se ut eller vilka egenskaper de skall ha/dela. En trait är en icke klassbestämd metod som fritt kan användas av andra klasser.</p>
        <p>Jag löste i huvudsak uppgiften så när de övningar vi gjort och de lektioner som jag medverkat/sett. Använde de klasser som föreslogs och följde mönstrewt från Dice då det kändes so mden väg som var närmast för mig att känna att jag skulle få ihop all kod organiserat. Jag började uppgiften med att efterlikna våra testsidor med enkla länkar där varje route hade sin kod för att interagera med classerna. Genom att hålla mig nära strukturen kunde jag lätt testa mig fram och ändra mindre saker i taget. Jag är nöjd med koden så som jag fått ihop den, förbättringspotential ser jag i framförallt hur jag hanterar routes, hur konsekvent användat av variabelnamn oc hstrukturen i vilken ordning de skrivs ut. Vad gäller alla metoder och klasser så var detta första gången jag skrev denna typ av kod och jag har läst mycket kod som löser liknande uppgifter för att hitta hur strukturen skulle va. Jag får fundera mer på förbättring under kursen.</p>
        <p>Jag upplever att symfony är ett bra vekrtyg att jobba med, det hanterar mycket kodstruktur och kopplingar till en. Hittills tycker jag om att jobba i ramverket då det känns tillräckligt naturligt i sin struktur och det är lätt att se/skapa/sätta ihop variabler, funktioner och routes. Det känns dock fortfarande som att där finns väldigt mycket mer att lära.</p>
        <p>Mitt TIL för detta momentet blir två detaljer. Det första är att OOP som jag var rädd för innan var inte så dumt när man får till det, när man har grunden på plats är det gansdka trewvligt att jobba med. Det andra är, '/' är ett fantastiskt tecken som programmera tills det sitter på fel ställe, lite noggran läsning av egen kod spar mycket tid senare. </p>
    </section>

    <section id="kmom03">
        <h2>Kursmoment 03</h2>
        <p>Det som framförallt kändes som en fördel i att jobba med pseudokod och flödesdiagram var att man slapp tänka om strukturen vid varje del av koden eller funktion som skulle testas. Grundstrukturen står på "pappret". Jag tror det är en bra idé att skissa ner det på det sättet i takt med att uppgifterna och lösningarna växer. Jag känner att mina egna ordval och "pilar" (loopar) hjälpte till när beslutet skulle tas om hur koden skulle organiseras.</p>
        <p>Min uppgift är löst ganska likt förslaget för hur det skall lösas med några undantag i spelet. Jag har kämpat hårt med att all kod skall ligga i klasser i metoder där uppgiften för metoden är direkt kopplad till klassen den ligger i. Jag tycker nog att de flesta funktioner har hamnat på en bra plats i koden och att den är relativt lätt att få överblick på. Mitt spel baseras på klassiska 21-regler och all logik som är direkt spekopplat har fått en egen klass som heter game21, game21 är uppbyggd av 2 spelarhänder och en kortlek vilket gör dem andra klasserna direkt användbara i andra kortspel med standardkortlek. Är supernöjd med hur den biten blev, men förbättringar som jag skulle kunna tänka mig är att spelet stannats tydligare när spelaren går bust, till exempel att man i det läget inte kan dra fler kort så att man påtvingar spelaren kortspelets flöde bättre. Där finns även några hårda kopplingar och någon enstaka plats där antal är hårdkodat.    </p>
        <p>Ramverk kan gärna kännas stora och fulla med kod, det är lätt att bli vilsen när man inte har så mycket erfarenhet. Samtidigt innehåller de ofta väldigt bra förenklingar av uppgifter och sättet man jobbar med temlpates och dylikt på är ju där för att förenkla, vilket det också gör såklart. Symfony är det ramverk som jag hittills tyckt om bäst och jag har inte bestämt mig för om det är för att det är mest intuitivt eller för att det innehåller flest tekniker som jag tidigare använt, vilket gör det mer bekvämt.</p>
        <p>Till mitt TIL. Jag gillar verkligen hur symfony hanterar sessioner med SessionInterface. Att kunna lägga alla objekten i min game21 klass och sedan stoppa den i en variabel, sätta i sessionen och lätt hämta med en rad Get-> var smidigt och kortade ner koden i mina routes rejält. Sen var det bara att hämta via en enkel get-metod om man behövde specifika variabler eller i detta fel spelhänder. </p>
    </section>

    <section id="kmom04">
        <h2>Kursmoment 04</h2>
        <p>Jag hade första ganska låg förståelse för testning och tyckte att det verkade lite omständligt och tråkigt. Men desto mer jag skrev så vände det till att jag upplevde det väldigt nyttigt. Jag känner att min förståelse för koden har blivit mycket bättre i detta kursmoment. Att reflektera, dokumentera och tvingas att gå in i varje detalj av koden om och om igen, gjorde att det gick snabbare och snabbare att skriva kod. Det är kul när man känner att det flyuter på. Väl installerat upplever jag phpunit var lättanvänt och med överskådliga rapporter. När det går snett så gick det oftast lätt att hitta rätt ställe i koden</p>
        <p>Min kodtäckning blev 100%, jag kämpade på från rad ett och skrev testkoden rad för rad enda tills jag blev färdig. Då hade jag också tittat på lektionen om mockade objekt och använda denna teknik där det blev för svårt att testa annars. Det var inte tänkt att satsa på just 100% från början, men när jag var så nära så gav jag den extra tiden som krävdes för detta.</p>
        <p>Koden vart testbar på ett bra sätt i de flesta fall, jag har försökt följa så mycket kodstandard och arbetssätt som jag hunnit lära mig, och använt mig av dependancy injection i en del delar. Det som jag upplevde var svårast att testa var där jag hade ett switch case med en default: som aldrig var tanken att användas när kortleken initieras. Istället för att skriva om en kod som jag tyckte var bra i övrigt skapade jag ett mockat objekt som motsvarade kriterierna så att resultatet kunde testas</p>
        <p>Valet föll på att envisas med att behålla koden som den var, jag fokuserade på att bli bättre på att skriva testcase. Jag har dessutom testat mitt spel så många gånger och fått det att flyta på bra så jag ville inte ändra på något som istället kunde göra det värre.</p>
        <p>Testbar kod och snygg kod hänger såklart ihop. Den kod som innehåller endast en funktion och har en uppgift, är tydligt skriven och med tydlig uppgift, det var oftast den kod jag också kände att det gick väldigt fort att skriva testet till. De värsta delarna var de som innehåll flera beslut och var beroende av fler än en annan del av koden. Där var det på gränsen att jag ville skriva om koden istället. </p>
        <p>Det jag har lärt mig av det kursmoment är hur mycket arbete det finns runt koden och hur man kan validera att den är bra och fungerar som det skall. Att testa var väldigt nyttigt då jag kände att jag fick skriva mycket kod , och det ar gjort att jag fått mycket bättre förståelse för vad som änder i ingående och utgående del av koden och hur man kan arbeta med den på olika sätt.</p>
    </section>
{% endblock %}
