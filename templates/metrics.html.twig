{% extends "base.html.twig" %}

{% block title %}Home{% endblock %}

{% block body %}

<h1>Introduktion</h1>
<h3>De 6C om kodkvalitet & hur det påverkar din kod</h3> 

<h4>Codestyle</h4>
<p>Kodstil handlar om hur koden är formatterad. Detta innefattar till exempel indentering, namngivning, mellanrum, användning av semicolon. Alltså att man fäljer kodens standard. Kodstilen är viktig eftersom koden då blir mer läsbar och med det lättare att underhålla både för en själv och andra man samarbetar med.</p>

<h4>Coverage</h4>
<p>Coverage relaterar direkt till samma uttryck på svenska, kodtäckning. Det är hur stor del av koden som täcks av enhetstester. Att ha en vältestat kod sägs ge bättre kodkvalitet och mindre buggar.</p>

<h4>Complexity</h4>
<p>Komplexiteten är direkt kopplat till kodens "djup" och  komplexitet.  Hur många vägar koden har genom till exempel if-satser och beslut.  . Hur komplex den är avgör hur svår den blir att förstå och underhålla, detta i sin tur är en fråga om hur lång tid det tar att göra ändringar och tid är också en fråga om kostnader.</p>

<h4>Cohesion</h4>
<p>Cohesion mäter hur sammanhängande koden är i sina klasser. Är cohesion hög så innebär det att koden har ett tydligt fokus på att lösa ett enskilt problem och således är sammanhängande. Detta är viktigt för att det skall vara tydligt och "enkelt" att underhålla koden. När uppgifterna blir tydligare i koden blir den också mer testbar och återanvändbar.</p>

<h4>Coupling</h4>
<p>Coupling är ett beroende. Det är bättre med ett lägre beroende av annan kod eftersom koden blir lättare att ändra i om man påverkar mindre annan kod. Är kopplingen låg går det också lättare att återanvända, koden blir då mer flexibel.</p>

<h4>CRAP</h4>
<p>CRAP är en poängsättning av koden. Den ger ett riktvärde på hur hög risk koden har. Crap betyder "change risk anti-patterns" och mäter risken på att ändra i koden. Hög CRAP = högre risk. >Mätvariablerna i CRAP är cyklomatisk komplexitet och test coverage. Har man en hög andel testad kod och låg cyklomatisk komplexitet så bör koden vara lättare att ändra i.</p>

<h1>Phpmetrics</h1>
<p>Min förhoppning var att där skulle vara en del roliga fel att sätta tänderna i, men min kod testar 9.97 i scrutinizer och har överlag "låga" värden i phpmetrics. Självklart kan den bli mycket bättre, men det gjorde utgången i denna övningen mycket svårare.</p>
<h4>Svagheter i koden</h4>
<h4>1.</h4>

<p>Det första jag valt att fokusera på är klassen DeckOfCards. Den blir gul, troligt då den cyclomatiska komplexitetet är på/över gränsen för lite högt och maintainability på 78. Jag lutar dock att se över komplexiteten som prioritering, men hur lätt den är att underhålla kommer troligt att följa med när jag eventellt frikopplar instansieringen av kort-objekt i denna klass.</p>
<a href="{{ asset('img/metrics4.jpg') }}">
    <img src="{{ asset('img/metrics4.jpg') }}" alt="" style="width: 300px; height: auto;">
</a>

<h4>2.</h4>
<p>Andra svagheten är att App\Card inte följer stable abstractions principle. Paketet är instabilt och abstract.</p>
<a href="{{ asset('img/metrics2.jpg') }}">
    <img src="{{ asset('img/metrics2.jpg') }}" alt="" style="width: 800px; height: auto;">
</a>

<h4>3.</h4>
<p>Tredje svagheten är game21Controller, kontrollern är helt otestad.</p>
<a href="{{ asset('img/metrics1.jpg') }}">
    <img src="{{ asset('img/metrics1.jpg') }}" alt="" style="width: 300px; height: auto;">
</a>

<h1>Scrutinizer</h1>

<a href="{{ asset('img/scrutinizer1.jpg') }}">
    <img src="{{ asset('img/scrutinizer1.jpg') }}" alt="" style="width: 300px; height: auto;">
</a>
<p>'Variable $data does not seem to be defined for all execution paths leading up to this point.' Skapar sidfel om man går direkt till routen.</p>

<a href="{{ asset('img/scrutinizer2.jpg') }}">
    <img src="{{ asset('img/scrutinizer2.jpg') }}" alt="" style="width: 300px; height: auto;">
</a>
<p>'The assignment to $cardHand is dead and can be removed'. Objektet skapas men används egentligen inte i testets kod</p>

<a href="{{ asset('img/scrutinizer3.jpg') }}">
    <img src="{{ asset('img/scrutinizer3.jpg') }}" alt="" style="width: 300px; height: auto;">
</a>
<p>Ganska mycket oanvänd kod och imports.</p>

<a href="https://scrutinizer-ci.com/g/KenZan00/mvc/badges/build.png?b=main">
    <img src="https://scrutinizer-ci.com/g/KenZan00/mvc/badges/build.png?b=main" alt="Scrutinizer Build">
</a>

<a href="https://scrutinizer-ci.com/g/KenZan00/mvc/badges/coverage.png?b=main">
    <img src="https://scrutinizer-ci.com/g/KenZan00/mvc/badges/coverage.png?b=main" alt="Scrutinizer Coverage">
</a>

<a href="https://scrutinizer-ci.com/g/KenZan00/mvc/badges/quality-score.png?b=main">
    <img src="https://scrutinizer-ci.com/g/KenZan00/mvc/badges/quality-score.png?b=main" alt="Scrutinizer Score">
</a>

<h3>Analys</h3>

<p>Kodstilen justeras efterhand med hjälp av csfix, och jag upplever därför att den är hyfsat bra. Tittar man sedan på poängen i coverage så är den låg i mitt projekt, detta är delvis för att fokuset har legat på att testa egenskrivna klasser i kmomen. Där jag valde att aktivt lämna uppgiften ser man tydligt att dice / card & controllers är det som är otestat och sänker då snittet. Komplexiteten är överlag låg på min kod, snittet ligger på 3.17 sorterat per klass och maxtalet är 13 i deckOfCards.</p>
<p>Sammanhållningen (Cohesion) i koden är relativt bra, det finns inga varningen på det i mätningar vilket jag läst i scrutinizers dokumentation, att den mätningen finns med. Om jag skall göra en egen observation, så är cohesion lite lägre i deckOfCards då den har ett '&'. den både skapar kortleken med hjälp av hårda variabler och sedan sköter kortlekens uppgifter. Vi kommer då in på 'coupling' som är direkt relaterast till detta, de andra klasserna förlitar sig dependancy injection medan deckOfCards instansierar kort-objekt i sin ena metod.</p>
<p>Crap-score påverkas direkt av komplexitet och testernas täckning. CRAP-score är som högst i mina controllers där det finns mycket kod och lägst andel testad kod. Det är också mina controllers och otestad kod som "troligt" har buggar. DiceGameController har 0.47, cards motsvarighet 0.34 och game21 0.28. "Vinsten" i klasserna tar deckOfcards med 0.24 som både har delat ansvar gällande kortlek, den högsta cyclomatiska complexiteten med 6 på metod och 13 på hela klassen. Om än inga höga värden så sticker den ut mot de andra som har nästan samtliga värden lägre gälladne komplexitet.</p>

<h1>Förbättringar</h1>

<ul>
    <li>Fixa issues i scrutinizer - Oanvänd kod, fel format i dokumentation och oanvänd kod</li>
    <li>Refactoring deckOfCards - Frikoppla "tillverkningen" av kortleken och istället injecta den i deckOfCards och därmed ge deckOfCards en 'single responsibility' och kanske lösa stabla abstractions principle om jag har förstått den rätt.</li>
    <li>Kodtäckning - Öka kodtäckningen - Försöka mig på att testa i controller och öka kodtäckningen något för att se hur det påverkar koden.</li>
</ul>

<p>Jag tror att issues kommer att förbättre koden på det sätt att den följer kodstandarden bättre och kanske ger mig ett högra totalbetyg när tillräckligt många är fixade. Refactoring av deckOfCards hoppas jag skall minska klassens cyklomatiska komplexitet, öka maintainability, minska antalet antalet teoretiska buggar och kanske ta bort varningen för stable abstractions principle. Att öka kodtäckningen kommer troligt resultera i färre teoretiska buggar i de klasser/kontrollers där detta görs.</p>

{% endblock %}
